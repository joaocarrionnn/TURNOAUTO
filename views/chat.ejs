<!DOCTYPE html>
<html lang="pt-BR" class="h-full">
<head>
  <%- include('partials/head', {title: 'Chat'}); %>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    .chat-container {
      display: flex;
      height: 70vh;
    }
    
    .conversas-list {
      width: 300px;
      border-right: 1px solid #dee2e6;
      overflow-y: auto;
      background-color: #ffffff;
    }
    
    .dark .conversas-list {
      background-color: #1f2937;
      border-right-color: #374151;
    }
    
    .conversa-item {
      padding: 10px;
      border-bottom: 1px solid #eee;
      cursor: pointer;
      display: flex;
      justify-content: space-between;
      transition: background-color 0.2s;
    }
    
    .dark .conversa-item {
      border-bottom-color: #374151;
    }
    
    .conversa-item:hover {
      background-color: #f8f9fa;
    }
    
    .dark .conversa-item:hover {
      background-color: #374151;
    }
    
    .conversa-item.active {
      background-color: #e9ecef;
    }
    
    .dark .conversa-item.active {
      background-color: #4b5563;
    }
    
    .conversa-nao-lidas {
      background-color: #007bff;
      color: white;
      border-radius: 50%;
      width: 20px;
      height: 20px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 0.75rem;
    }
    
    .chat-area {
      flex: 1;
      display: flex;
      flex-direction: column;
      background-color: #f8f9fa;
    }
    
    .dark .chat-area {
      background-color: #111827;
    }
    
    .chat-header {
      padding: 15px;
      border-bottom: 1px solid #dee2e6;
      font-weight: bold;
      background-color: #ffffff;
    }
    
    .dark .chat-header {
      background-color: #1f2937;
      border-bottom-color: #374151;
      color: #f3f4f6;
    }
    
    .chat-messages {
      flex: 1;
      overflow-y: auto;
      padding: 15px;
      display: flex;
      flex-direction: column;
      gap: 10px;
      background-color: #f8f9fa;
    }
    
    .dark .chat-messages {
      background-color: #111827;
    }
    
    .chat-input-container {
      padding: 15px;
      border-top: 1px solid #dee2e6;
      background-color: #ffffff;
    }
    
    .dark .chat-input-container {
      background-color: #1f2937;
      border-top-color: #374151;
    }
    
    .message {
      max-width: 70%;
      margin-bottom: 15px;
      padding: 10px 15px;
      border-radius: 18px;
      position: relative;
      word-wrap: break-word;
      box-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }
    
    .message.received {
      align-self: flex-start;
      background-color: #ffffff;
      border: 1px solid #e5e5ea;
      color: #111827;
    }
    
    .dark .message.received {
      background-color: #374151;
      border-color: #4b5563;
      color: #f3f4f6;
    }
    
    .message.sent {
      align-self: flex-end;
      background-color: #007bff;
      color: white;
    }
    
    .message-info {
      font-size: 0.75rem;
      margin-top: 5px;
      opacity: 0.8;
    }
    
    .message.received .message-info {
      text-align: left;
      color: #666;
    }
    
    .dark .message.received .message-info {
      color: #d1d5db;
    }
    
    .message.sent .message-info {
      text-align: right;
      color: rgba(255,255,255,0.8);
    }
    
    .search-container {
      padding: 10px;
      border-bottom: 1px solid #dee2e6;
      background-color: #ffffff;
    }
    
    .dark .search-container {
      background-color: #1f2937;
      border-bottom-color: #374151;
    }
    
    .search-results {
      position: absolute;
      width: 280px;
      max-height: 300px;
      overflow-y: auto;
      background: white;
      border: 1px solid #ddd;
      z-index: 100;
      display: none;
    }
    
    .dark .search-results {
      background-color: #1f2937;
      border-color: #374151;
    }
    
    .search-result-item {
      padding: 10px;
      cursor: pointer;
    }
    
    .dark .search-result-item {
      color: #f3f4f6;
    }
    
    .search-result-item:hover {
      background-color: #f8f9fa;
    }
    
    .dark .search-result-item:hover {
      background-color: #374151;
    }
    
    .text-muted {
      color: #6c757d;
    }
    
    .dark .text-muted {
      color: #9ca3af;
    }
  </style>
</head>
<body class="bg-gray-50 dark:bg-gray-900 h-full">
  <%- include('partials/header', {user: user}); %>
  
  <main class="container mx-auto px-4 py-8">
    <h1 class="text-2xl font-bold text-gray-800 dark:text-white mb-6">Chat do Turno</h1>
    
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
      <div class="chat-container">
        <!-- Lista de conversas -->
        <div class="conversas-list">
          <div class="search-container">
            <div class="relative">
              <input type="text" id="search-user" class="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-800 dark:text-white" placeholder="Buscar usuário...">
              <button class="absolute right-2 top-2 text-gray-400 dark:text-gray-300" id="search-button">
                <i class="fas fa-search"></i>
              </button>
            </div>
            <div class="search-results" id="search-results"></div>
          </div>
          
          <% if (conversas && conversas.length > 0) { %>
            <% conversas.forEach(conversa => { %>
              <div class="conversa-item" data-conversa-id="<%= conversa.id %>" 
                   onclick="loadConversation(<%= conversa.id %>, <%= conversa.usuario1_id === user.id ? conversa.usuario2_id : conversa.usuario1_id %>, '<%= conversa.usuario1_id === user.id ? conversa.usuario2_name : conversa.usuario1_name %>')">
                <div class="text-gray-800 dark:text-gray-200">
                  <%= conversa.usuario1_id === user.id ? conversa.usuario2_name : conversa.usuario1_name %>
                </div>
                <% if (conversa.nao_lidas > 0) { %>
                  <div class="conversa-nao-lidas"><%= conversa.nao_lidas %></div>
                <% } %>
              </div>
            <% }); %>
          <% } else { %>
            <div class="p-3 text-muted">Nenhuma conversa encontrada</div>
          <% } %>
        </div>
        
        <!-- Área do chat -->
        <div class="chat-area" id="chat-area">
          <div class="chat-header text-center text-gray-500 dark:text-gray-400" id="chat-header">
            Selecione uma conversa ou inicie uma nova
          </div>
          <div class="chat-messages" id="chat-messages"></div>
          <div class="chat-input-container" id="chat-input-container" style="display: none;">
            <form id="message-form" class="flex gap-2">
              <input type="text" class="flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-800 dark:text-white" id="message-input" placeholder="Digite sua mensagem..." autocomplete="off">
              <button class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-md" type="submit">
                <i class="fas fa-paper-plane"></i>
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </main>
  
  <%- include('partials/footer'); %>
  
  <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
  
  <script>
    let currentConversationId = null;
    let currentOtherUserId = null;
    let currentOtherUserName = null;
    let messageCheckInterval = null;
    
    document.addEventListener('DOMContentLoaded', function() {
      // Buscar usuários
      const searchInput = document.getElementById('search-user');
      const searchResults = document.getElementById('search-results');
      
      searchInput.addEventListener('input', function() {
        const termo = this.value.trim();
        if (termo.length < 2) {
          searchResults.style.display = 'none';
          return;
        }
        
        fetch(`/chat/buscar-usuarios?termo=${encodeURIComponent(termo)}`)
          .then(response => response.json())
          .then(users => {
            if (users.length > 0) {
              searchResults.innerHTML = users.map(user => `
                <div class="search-result-item" onclick="startNewConversation(${user.id}, '${user.name.replace(/'/g, "\\'")}')">
                  ${user.name} (${user.email})
                </div>
              `).join('');
              searchResults.style.display = 'block';
            } else {
              searchResults.innerHTML = '<div class="p-2 text-muted">Nenhum usuário encontrado</div>';
              searchResults.style.display = 'block';
            }
          })
          .catch(error => {
            console.error('Erro na busca:', error);
          });
      });
      
      // Formulário de mensagem
      const messageForm = document.getElementById('message-form');
      const messageInput = document.getElementById('message-input');
      
      messageForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const messageText = messageInput.value.trim();
        if (messageText && currentConversationId) {
          fetch('/chat/enviar-mensagem', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              conversa_id: currentConversationId,
              mensagem: messageText
            })
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              messageInput.value = '';
              // Adiciona a mensagem enviada ao chat
              addMessageToChat({
                id: Date.now(),
                mensagem: messageText,
                remetente_id: <%= user.id %>,
                remetente_name: '<%= user.name %>',
                data_envio: new Date().toISOString()
              }, true);
              scrollChatToBottom();
            }
          })
          .catch(error => {
            console.error('Erro ao enviar mensagem:', error);
          });
        }
      });
      
      // Fechar resultados de busca ao clicar fora
      document.addEventListener('click', function(e) {
        if (!searchResults.contains(e.target) && e.target !== searchInput) {
          searchResults.style.display = 'none';
        }
      });
    });
    
    function startNewConversation(userId, userName) {
      document.getElementById('search-results').style.display = 'none';
      document.getElementById('search-user').value = '';
      
      fetch('/chat/nova-conversa', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          usuario_id: userId
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.error) {
          alert(data.error);
        } else if (data.conversa_id) {
          loadConversation(data.conversa_id, userId, userName);
        }
      })
      .catch(error => {
        console.error('Erro ao criar conversa:', error);
        alert('Erro ao iniciar conversa');
      });
    }
    
    function loadConversation(conversaId, otherUserId, otherUserName) {
      if (messageCheckInterval) {
        clearInterval(messageCheckInterval);
      }
      
      currentConversationId = conversaId;
      currentOtherUserId = otherUserId;
      currentOtherUserName = otherUserName;
      
      document.getElementById('chat-messages').innerHTML = '<div class="text-center py-4">Carregando...</div>';
      
      fetch(`/chat/conversa/${conversaId}`)
        .then(response => {
          if (!response.ok) {
            throw new Error('Erro ao carregar conversa');
          }
          return response.text();
        })
        .then(html => {
          const tempDiv = document.createElement('div');
          tempDiv.innerHTML = html;
          
          const mensagensContainer = tempDiv.querySelector('#chat-messages');
          if (mensagensContainer) {
            document.getElementById('chat-messages').innerHTML = mensagensContainer.innerHTML;
            scrollChatToBottom();
            
            document.querySelectorAll('.conversa-item').forEach(item => {
              item.classList.remove('active');
              if (parseInt(item.getAttribute('data-conversa-id')) === conversaId) {
                item.classList.add('active');
                const badge = item.querySelector('.conversa-nao-lidas');
                if (badge) badge.remove();
              }
            });
            
            document.getElementById('chat-header').textContent = `Conversa com ${otherUserName}`;
            document.getElementById('chat-input-container').style.display = 'block';
            
            startCheckingForNewMessages();
          }
        })
        .catch(error => {
          console.error('Erro ao carregar conversa:', error);
          document.getElementById('chat-messages').innerHTML = `
            <div class="text-center text-danger py-4">
              Erro ao carregar conversa. <button onclick="loadConversation(${conversaId}, ${otherUserId}, '${otherUserName}')">Tentar novamente</button>
            </div>
          `;
        });
    }
    
    function addMessageToChat(message, isSent) {
      const chatMessages = document.getElementById('chat-messages');
      
      const messageElement = document.createElement('div');
      messageElement.className = `message ${isSent ? 'sent' : 'received'}`;
      messageElement.style.opacity = '0';
      messageElement.style.transform = isSent ? 'translateX(20px)' : 'translateX(-20px)';
      messageElement.style.transition = 'all 0.3s ease';
      
      const date = new Date(message.data_envio);
      const timeString = `${date.getHours()}:${date.getMinutes().toString().padStart(2, '0')}`;
      
      messageElement.innerHTML = `
        <div class="message-text">${message.mensagem}</div>
        <div class="message-info">
          ${isSent ? 'Você' : message.remetente_name} - ${timeString}
        </div>
      `;
      
      chatMessages.appendChild(messageElement);
      
      setTimeout(() => {
        messageElement.style.opacity = '1';
        messageElement.style.transform = 'translateX(0)';
      }, 10);
    }
    
    function scrollChatToBottom() {
      const chatMessages = document.getElementById('chat-messages');
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    
    function startCheckingForNewMessages() {
      if (messageCheckInterval) {
        clearInterval(messageCheckInterval);
      }
      
      messageCheckInterval = setInterval(() => {
        if (currentConversationId) {
          fetch(`/chat/verificar-mensagens/${currentConversationId}`)
            .then(response => response.json())
            .then(messages => {
              if (messages.length > 0) {
                messages.forEach(message => {
                  const isSent = message.remetente_id === <%= user.id %>;
                  addMessageToChat(message, isSent);
                });
                scrollChatToBottom();
                
                const conversaItem = document.querySelector(`.conversa-item[data-conversa-id="${currentConversationId}"]`);
                if (conversaItem && !conversaItem.classList.contains('active')) {
                  let badge = conversaItem.querySelector('.conversa-nao-lidas');
                  if (!badge) {
                    badge = document.createElement('div');
                    badge.className = 'conversa-nao-lidas';
                    conversaItem.appendChild(badge);
                  }
                  badge.textContent = messages.length;
                }
              }
            })
            .catch(error => {
              console.error('Erro ao verificar mensagens:', error);
            });
        }
      }, 3000);
    }
  </script>
</body>
</html>
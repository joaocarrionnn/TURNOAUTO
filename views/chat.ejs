<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <%- include('partials/head', {title: 'Chat'}); %>
  <style>
    .chat-container {
      display: flex;
      height: 70vh;
    }
    
    .conversas-list {
      width: 300px;
      border-right: 1px solid #dee2e6;
      overflow-y: auto;
    }
    
    .conversa-item {
      padding: 10px;
      border-bottom: 1px solid #eee;
      cursor: pointer;
      display: flex;
      justify-content: space-between;
    }
    
    .conversa-item:hover {
      background-color: #f8f9fa;
    }
    
    .conversa-item.active {
      background-color: #e9ecef;
    }
    
    .conversa-nao-lidas {
      background-color: #007bff;
      color: white;
      border-radius: 50%;
      width: 20px;
      height: 20px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 0.75rem;
    }
    
    .chat-area {
      flex: 1;
      display: flex;
      flex-direction: column;
    }
    
    .chat-header {
      padding: 15px;
      border-bottom: 1px solid #dee2e6;
      font-weight: bold;
    }
    
    .chat-messages {
      flex: 1;
      overflow-y: auto;
      padding: 15px;
    }
    
    .chat-input-container {
      padding: 15px;
      border-top: 1px solid #dee2e6;
    }
    
    .message {
      max-width: 70%;
      margin-bottom: 15px;
      padding: 10px 15px;
      border-radius: 18px;
      position: relative;
      word-wrap: break-word;
    }
    
    .received {
      align-self: flex-start;
      background-color: #ffffff;
      border: 1px solid #e5e5ea;
    }
    
    .sent {
      align-self: flex-end;
      background-color: #007bff;
      color: white;
    }
    
    .message-info {
      font-size: 0.75rem;
      margin-top: 5px;
      opacity: 0.8;
    }
    
    .received .message-info {
      text-align: left;
    }
    
    .sent .message-info {
      text-align: right;
      color: rgba(255,255,255,0.8);
    }
    
    .search-container {
      padding: 10px;
      border-bottom: 1px solid #dee2e6;
    }
    
    .search-results {
      position: absolute;
      width: 280px;
      max-height: 300px;
      overflow-y: auto;
      background: white;
      border: 1px solid #ddd;
      z-index: 100;
      display: none;
    }
    
    .search-result-item {
      padding: 10px;
      cursor: pointer;
    }
    
    .search-result-item:hover {
      background-color: #f8f9fa;
    }
  </style>
</head>
<body>
  <%- include('partials/header', {user: user}); %>
  
  <main class="container my-4">
    <h1 class="mb-4">Chat do Turno</h1>
    
    <div class="card">
      <div class="chat-container">
        <!-- Lista de conversas -->
        <div class="conversas-list">
          <div class="search-container">
            <div class="input-group mb-3">
              <input type="text" id="search-user" class="form-control" placeholder="Buscar usuário...">
              <button class="btn btn-outline-secondary" type="button" id="search-button">
                <i class="fas fa-search"></i>
              </button>
            </div>
            <div class="search-results" id="search-results"></div>
          </div>
          
          <% if (conversas && conversas.length > 0) { %>
            <% conversas.forEach(conversa => { %>
              <div class="conversa-item" data-conversa-id="<%= conversa.id %>" 
                   onclick="loadConversation(<%= conversa.id %>, <%= conversa.usuario1_id === user.id ? conversa.usuario2_id : conversa.usuario1_id %>, '<%= conversa.usuario1_id === user.id ? conversa.usuario2_name : conversa.usuario1_name %>')">
                <div>
                  <%= conversa.usuario1_id === user.id ? conversa.usuario2_name : conversa.usuario1_name %>
                </div>
                <% if (conversa.nao_lidas > 0) { %>
                  <div class="conversa-nao-lidas"><%= conversa.nao_lidas %></div>
                <% } %>
              </div>
            <% }); %>
          <% } else { %>
            <div class="p-3 text-muted">Nenhuma conversa encontrada</div>
          <% } %>
        </div>
        
        <!-- Área do chat -->
        <div class="chat-area" id="chat-area">
          <div class="chat-header text-center text-muted" id="chat-header">
            Selecione uma conversa ou inicie uma nova
          </div>
          <div class="chat-messages" id="chat-messages"></div>
          <div class="chat-input-container" id="chat-input-container" style="display: none;">
            <form id="message-form">
              <div class="input-group">
                <input type="text" class="form-control" id="message-input" placeholder="Digite sua mensagem..." autocomplete="off">
                <button class="btn btn-primary" type="submit">
                  <i class="fas fa-paper-plane"></i> Enviar
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </main>
  
  <%- include('partials/footer'); %>
  
  <!-- Adicione Font Awesome para ícones -->
  <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
  
  <script>
    let currentConversationId = null;
    let currentOtherUserId = null;
    let currentOtherUserName = null;
    let messageCheckInterval = null;
    
    document.addEventListener('DOMContentLoaded', function() {
      // Buscar usuários
      const searchInput = document.getElementById('search-user');
      const searchResults = document.getElementById('search-results');
      
      searchInput.addEventListener('input', function() {
        const termo = this.value.trim();
        if (termo.length < 2) {
          searchResults.style.display = 'none';
          return;
        }
        
        fetch(`/chat/buscar-usuarios?termo=${encodeURIComponent(termo)}`)
          .then(response => response.json())
          .then(users => {
            if (users.length > 0) {
              searchResults.innerHTML = users.map(user => `
                <div class="search-result-item" onclick="startNewConversation(${user.id}, '${user.name.replace(/'/g, "\\'")}')">
                  ${user.name} (${user.email})
                </div>
              `).join('');
              searchResults.style.display = 'block';
            } else {
              searchResults.innerHTML = '<div class="p-2 text-muted">Nenhum usuário encontrado</div>';
              searchResults.style.display = 'block';
            }
          })
          .catch(error => {
            console.error('Erro na busca:', error);
          });
      });
      
      // Formulário de mensagem
      const messageForm = document.getElementById('message-form');
      const messageInput = document.getElementById('message-input');
      
      messageForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const messageText = messageInput.value.trim();
        if (messageText && currentConversationId) {
          fetch('/chat/enviar-mensagem', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              conversa_id: currentConversationId,
              mensagem: messageText
            })
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              messageInput.value = '';
              // Adiciona a mensagem enviada ao chat
              addMessageToChat({
                id: Date.now(), // ID temporário
                mensagem: messageText,
                remetente_id: <%= user.id %>,
                remetente_name: '<%= user.name %>',
                data_envio: new Date().toISOString()
              }, true);
              scrollChatToBottom();
            }
          })
          .catch(error => {
            console.error('Erro ao enviar mensagem:', error);
          });
        }
      });
      
      // Fechar resultados de busca ao clicar fora
      document.addEventListener('click', function(e) {
        if (!searchResults.contains(e.target) && e.target !== searchInput) {
          searchResults.style.display = 'none';
        }
      });
    });
    
    function startNewConversation(userId, userName) {
  document.getElementById('search-results').style.display = 'none';
  document.getElementById('search-user').value = '';
  
  fetch('/chat/nova-conversa', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json', // Adicione este header
    },
    body: JSON.stringify({ // Certifique-se de enviar como JSON
      usuario_id: userId
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.error) {
      alert(data.error);
    } else if (data.conversa_id) {
      loadConversation(data.conversa_id, userId, userName);
    }
  })
  .catch(error => {
    console.error('Erro ao criar conversa:', error);
    alert('Erro ao iniciar conversa');
  });
}
    
function loadConversation(conversaId, otherUserId, otherUserName) {
  // Para qualquer verificação de mensagens em andamento
  if (messageCheckInterval) {
    clearInterval(messageCheckInterval);
  }
  
  currentConversationId = conversaId;
  currentOtherUserId = otherUserId;
  currentOtherUserName = otherUserName;
  
  // Mostra loading
  document.getElementById('chat-messages').innerHTML = '<div class="text-center py-4">Carregando...</div>';
  
  fetch(`/chat/conversa/${conversaId}`)
    .then(response => {
      if (!response.ok) {
        throw new Error('Erro ao carregar conversa');
      }
      return response.text();
    })
    .then(html => {
      // Cria um elemento temporário para extrair o que precisamos
      const tempDiv = document.createElement('div');
      tempDiv.innerHTML = html;
      
      const mensagensContainer = tempDiv.querySelector('#chat-messages');
      if (mensagensContainer) {
        document.getElementById('chat-messages').innerHTML = mensagensContainer.innerHTML;
        scrollChatToBottom();
        
        // Atualiza a UI
        document.querySelectorAll('.conversa-item').forEach(item => {
          item.classList.remove('active');
          if (parseInt(item.getAttribute('data-conversa-id')) === conversaId) {
            item.classList.add('active');
            // Remove o badge de mensagens não lidas
            const badge = item.querySelector('.conversa-nao-lidas');
            if (badge) badge.remove();
          }
        });
        
        document.getElementById('chat-header').textContent = `Conversa com ${otherUserName}`;
        document.getElementById('chat-input-container').style.display = 'block';
        
        // Inicia a verificação de novas mensagens
        startCheckingForNewMessages();
      }
    })
    .catch(error => {
      console.error('Erro ao carregar conversa:', error);
      document.getElementById('chat-messages').innerHTML = `
        <div class="text-center text-danger py-4">
          Erro ao carregar conversa. <button onclick="loadConversation(${conversaId}, ${otherUserId}, '${otherUserName}')">Tentar novamente</button>
        </div>
      `;
    });
}
    
    function addMessageToChat(message, isSent) {
      const chatMessages = document.getElementById('chat-messages');
      
      const messageElement = document.createElement('div');
      messageElement.className = `message ${isSent ? 'sent' : 'received'}`;
      
      const date = new Date(message.data_envio);
      const timeString = `${date.getHours()}:${date.getMinutes().toString().padStart(2, '0')}`;
      
      messageElement.innerHTML = `
        <div class="message-text">${message.mensagem}</div>
        <div class="message-info">${isSent ? 'Você' : message.remetente_name} - ${timeString}</div>
      `;
      
      chatMessages.appendChild(messageElement);
    }
    
    function scrollChatToBottom() {
      const chatMessages = document.getElementById('chat-messages');
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    
    function startCheckingForNewMessages() {
      if (messageCheckInterval) {
        clearInterval(messageCheckInterval);
      }
      
      messageCheckInterval = setInterval(() => {
        if (currentConversationId) {
          fetch(`/chat/verificar-mensagens/${currentConversationId}`)
            .then(response => response.json())
            .then(messages => {
              if (messages.length > 0) {
                messages.forEach(message => {
                  addMessageToChat(message, false);
                });
                scrollChatToBottom();
                
                // Atualiza o contador na lista de conversas
                const conversaItem = document.querySelector(`.conversa-item[data-conversa-id="${currentConversationId}"]`);
                if (conversaItem && !conversaItem.classList.contains('active')) {
                  let badge = conversaItem.querySelector('.conversa-nao-lidas');
                  if (!badge) {
                    badge = document.createElement('div');
                    badge.className = 'conversa-nao-lidas';
                    conversaItem.appendChild(badge);
                  }
                  badge.textContent = messages.length;
                }
              }
            })
            .catch(error => {
              console.error('Erro ao verificar mensagens:', error);
            });
        }
      }, 3000); // Verifica a cada 3 segundos
    }
  </script>
</body>
</html>